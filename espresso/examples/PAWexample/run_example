#!/bin/sh

# run from directory where this script is
cd `echo $0 | sed 's/\(.*\)\/.*/\1/'` # extract pathname
EXAMPLE_DIR=`pwd`

# Some pseudo sets are not good enough for the 
# plain wave scf calculation, but should be generated
# to test ld1 code. Add them here (separed with a "|"):
TABOO="none" #example: "PAW2|PAW3"

# check whether echo has the -e option
if test "`echo -e`" = "-e" ; then ECHO=echo ; else ECHO="echo -e" ; fi

# function to test the exit status of a job
. ../check_failure.sh

$ECHO
$ECHO "$EXAMPLE_DIR : starting"
$ECHO
$ECHO "This example will try to generate a PAW pseudo-potential"
$ECHO "for oxygen and two scf calculation: a single atom and a"
$ECHO "oxygen molecule"

# set the needed environment variables
. ../environment_variables
PSEUDO_DIR="$EXAMPLE_DIR/pseudo"
mkdir -p "$PSEUDO_DIR"

# required executables and pseudopotentials
BIN_LIST="pw.x ld1.x"

$ECHO
$ECHO "  executables directory: $BIN_DIR"
$ECHO "  pseudo directory:      $PSEUDO_DIR"
$ECHO "  temporary directory:   $TMP_DIR"
$ECHO
$ECHO "  checking that needed directories and files exist...\c"

# check for directories
for DIR in "$BIN_DIR" "$PSEUDO_DIR" ; do
    if test ! -d $DIR ; then
        $ECHO
        $ECHO "ERROR: $DIR not existent or not a directory"
        $ECHO "Aborting"
        exit 1
    fi
done
for DIR in "$TMP_DIR" "$EXAMPLE_DIR/results" ; do
    if test ! -d $DIR ; then
        mkdir $DIR
    fi
done
cd $EXAMPLE_DIR/results

# check for executables
for FILE in $BIN_LIST ; do
    if test ! -x $BIN_DIR/$FILE ; then
        $ECHO
        $ECHO "ERROR: $BIN_DIR/$FILE not existent or not executable"
        $ECHO "Aborting"
        exit 1
    fi
done

# how to run executables
LD1_COMMAND="$PARA_PREFIX $BIN_DIR/ld1.x $PARA_POSTFIX"
PW_COMMAND="$PARA_PREFIX $BIN_DIR/pw.x $PARA_POSTFIX"
$ECHO
$ECHO "  running ld1.x as: $LD1_COMMAND"
$ECHO "  running pw.x as:  $PW_COMMAND"
$ECHO

# clean TMP_DIR
$ECHO "  cleaning $TMP_DIR...\c"
rm -rf $TMP_DIR/*
$ECHO " done"

##################################################################
###                    Pseudo generation                       ###
##################################################################

# generation of pseudopotential
$ECHO "  running \"gen_pseudo\" to generate pseudopotentials..."
. "$EXAMPLE_DIR/gen_pseudo"
check_failure $?
$ECHO "  done."

# test of pseudopotential
$ECHO "  running \"test_pseudo\" to test pseudopotentials..."
. "$EXAMPLE_DIR/test_pseudo"
check_failure $?
$ECHO "  done."

# display pseudopotential test
$ECHO "  running \"view_pseudo\" to generate graphs of pp test..."
. "$EXAMPLE_DIR/view_pseudo"
check_failure $?
$ECHO "  done."

##################################################################
###                       Oxygen atom                          ###
##################################################################

$ECHO "  running oxygen atom calculation..."
PSEUDOLIST="NC1.UPF NC2.UPF US1.UPF US2.UPF PAW1.PAW PAW2.PAW  PAW3.PAW PAW4.PAW"
#CUTOFFLIST="25 45 60 70 85 95 100"
#CUTOFFLIST="100 84 70 59 50 42 35 29 25 21 18 15 13"
CUTOFFLIST="70 50 42 35 25 18 15 13"

for PSEUDO in $PSEUDOLIST; do
    $ECHO "    pseudo: $PSEUDO,\tcutoff:\c"
    NAME=$($ECHO $PSEUDO|awk -F. '{print $1}')
    # the next line is voodoo, see advanced bash scripting, chap. 9.5.
    eval $NAME="failed"
    if $ECHO $NAME|grep -Eq "$TABOO"; then 
        $ECHO " skipped";
        continue;
    fi
    DATA="./O1_$NAME.dat"
    $ECHO "# O1 atom, pseudo: $NAME, $(date)" >"$DATA"
    for CUTOFF in $CUTOFFLIST; do
        $ECHO "\t$CUTOFF\c"
        CUTRHO=$($ECHO "$CUTOFF 8 *p"|dc)
        TITLE="./pw.O1_$NAME"_"$CUTOFF"
cat << EOF > "$TITLE.in"
O1
 &control
    calculation = 'scf'
    prefix='o1',
    pseudo_dir = '$PSEUDO_DIR'
    outdir='$TMP_DIR'
    disk_io='low'
 /
 &system
    ibrav=  2, celldm(1) =10.0, nat=  1, ntyp= 1, nelec=$nelec,
    ecutwfc=$CUTOFF
    ecutrho=$CUTRHO,
    occupations = 'smearing'
    smearing = 'gaussian'
    degauss = 0.01
 /
 &electrons
    conv_thr =  1.0d-6
 /
ATOMIC_SPECIES
 O   1.000  $PSEUDO
ATOMIC_POSITIONS {alat}
O   0.0   0.0   0.0
K_POINTS automatic
 1 1 1 0 0 0
EOF
        # skip the calculation if it has already completed (testing)
        if grep -qs ! "$TITLE.out";then 
            $ECHO "-x\c";
        else
            $PW_COMMAND < "$TITLE.in" > "$TITLE.out" 2>&1
            $ECHO "-$?\c"
            #check_failure $?
        fi
        # save the total energy to plot a graph:
        ENERGY=$(awk '/\!/ {print $5}' "$TITLE.out")
        if [ "$ENERGY" ]; then
            $ECHO "$CUTOFF\t$ENERGY" >> "$DATA"
            eval $NAME="success"
        else
            $ECHO "$CUTOFF\t#" >> "$DATA"
        fi
    done # cutoff
    $ECHO
done # pseudo

# plot the data
PLOTFILE="./gnuplot.O1.in"
$ECHO "  plotting energies in \"O1.eps\""
$ECHO "set terminal postscript eps">  $PLOTFILE
$ECHO "set output 'O1.eps'"        >> $PLOTFILE
$ECHO "set style data lp"          >> $PLOTFILE
$ECHO "set title 'O1 atom'"        >> $PLOTFILE
$ECHO "set xlabel 'cutoff (Ry)'"   >> $PLOTFILE
$ECHO "set ylabel 'energy (Ry)'"   >> $PLOTFILE
$ECHO -n "plot"                    >> $PLOTFILE
for PSEUDO in $PSEUDOLIST; do
    NAME="`echo $PSEUDO|awk -F. '{print $1}'`"
    DATA="./O1_$NAME.dat"
    if $ECHO $NAME|grep -Eq "$TABOO"; then continue; fi
    # skip the file if no calc was successful
    if eval [ \$$NAME = "failed" ]; then continue; fi
    $ECHO -n ", '$DATA' u 1:2 t '$NAME'" >> $PLOTFILE
done
$ECHO >> $PLOTFILE
$ECHO ",s/plot,/plot/g\nw\nq"|ed $PLOTFILE
gnuplot $PLOTFILE

##################################################################
###                       Oxygen molecule                      ###
##################################################################

$ECHO "  running O2 molecule calculation..."
$ECHO "    pw cutoff: $CUTOFF, rho cutoff: $CUTRHO"
DISTLIST="0.4 0.5 0.6 0.7 0.8 0.9 1.0 1.2 1.4 "
CUTOFF="70"
CUTRHO="500"
CELL_SIZE="10.0"

for PSEUDO in $PSEUDOLIST; do
    $ECHO "    pseudo: $PSEUDO,\tbond length (a.u.):\c"
    NAME=$($ECHO $PSEUDO|awk -F. '{print $1}')
    eval $NAME="failed"
    if $ECHO $NAME|grep -Eq "$TABOO"; then 
        $ECHO " skipped";
        continue;
    fi
    DATA="./O2_$NAME.dat"
    $ECHO "# O2 molecule, pseudo: $NAME, $(date)" >"$DATA"
    $ECHO "# cutoff: $CUTOFF, rho cutoff: $CUTRHO, cell size: $CELL_SIZE a.u." >"$DATA"
    for DIST in $DISTLIST; do
        $ECHO "\t$DIST\c"
        TITLE="./pw.O2_$NAME"_"$DIST"
cat << EOF > "$TITLE.in"
O2
 &control
    calculation = 'scf'
    prefix='o2',
    pseudo_dir = '$PSEUDO_DIR'
    outdir='$TMP_DIR'
    disk_io='low'
 /
 &system
    ibrav=  1, celldm(1) =$CELL_SIZE, nat=  2, ntyp= 1,
    ecutwfc= $CUTOFF
    ecutrho= $CUTRHO
    occupations = 'smearing'
    smearing = 'gauss'
    degauss = 0.01
 /
 &electrons
    electron_maxstep=100,
    mixing_mode = 'plain'
    mixing_beta = 0.5
    mixing_ndim = 4
    conv_thr =  1.0d-6
 /
ATOMIC_SPECIES
 O   1.000  $PSEUDO
 H   1.000  H.pbe-rrkjus.UPF
ATOMIC_POSITIONS {bohr}
O  -$DIST   -$DIST   -$DIST
O  +$DIST   +$DIST   +$DIST
K_POINTS automatic
 1 1 1 0 0 0

EOF
        # skip the calculation if it has already completed (testing)
        if grep -qs ! "$TITLE.out";then
            $ECHO "-x\c";
        else
            $PW_COMMAND < "$TITLE.in" > "$TITLE.out" 2>&1
            $ECHO "-$?\c"
        fi
        #check_failure $?
        # save the total energy to plot a graph:
        ENERGY=$(awk '/\!/ {print $5}' "$TITLE.out")
        if [ "$ENERGY" ]; then
            $ECHO "$DIST\t$ENERGY" >> "$DATA"
            eval $NAME="success"
        else
            $ECHO "$DIST\t#" >> "$DATA"
        fi
    done # dist
    $ECHO
done # pseudo

# plot the data
PLOTFILE="./gnuplot.O2.in"
$ECHO "  plotting energies in \"O2.eps\""
$ECHO "set terminal postscript eps"     >  $PLOTFILE
$ECHO "set style data lp"               >> $PLOTFILE
$ECHO "set output 'O2.eps'"             >> $PLOTFILE
$ECHO "set title 'O2 molecule'"         >> $PLOTFILE
$ECHO "set xlabel 'bond length (a.u.)'" >> $PLOTFILE
$ECHO "set ylabel 'energy (Ry)'"        >> $PLOTFILE
$ECHO -n "plot"                         >> $PLOTFILE
for PSEUDO in $PSEUDOLIST; do
    NAME="`echo $PSEUDO|awk -F. '{print $1}'`"
    DATA="./O2_$NAME.dat"
    if $ECHO $NAME|grep -Eq "$TABOO";then continue; fi
    if eval [ \$$NAME = "failed" ]; then continue; fi
    $ECHO -n ", '$DATA' u 1:2 t '$NAME'" >> $PLOTFILE
done
$ECHO >> $PLOTFILE
$ECHO ",s/plot,/plot/g\nw\nq"|ed $PLOTFILE
gnuplot $PLOTFILE >/dev/null

$ECHO
$ECHO "$EXAMPLE_DIR: done"
