----------------------------------------------------------------------
*** NEW *** NEW INSTALLATION PROCEDURE *** NEW ***
----------------------------------------------------------------------

*** WARNING ***
This installation procedure is still experimental, and only a limited
number of architectures are currently supported.

You are encouraged to try it out and report feedback.  The old
installation procedure is deprecated, and will be removed at some
point in the future.
*** WARNING ***

Installation is a two-step procedure:

1) "cd" to the top directory of the PWscf tree (that should be the one
   where this file is), and issue this command at the shell prompt:

     ./configure

2) Now run:

     make target

   where "target" is one (or more) of the following:

     pw ph pp d3 gamma pwcond nc tools pwall upf fpmd cp all links

   Running "make" without arguments prints a list of available
   targets.

Cross-compilation isn't currently supported.  It might be at some
point in the future, but only if we get enough requests (or even
better, some volunteers!).

----------------------------------------------------------------------
First step : configuring
----------------------------------------------------------------------

"configure" is a GNU-style configuration script, automatically
generated by GNU Autoconf.  (If you want to play with it, its source
file is "configure.ac"; you may also want to edit "make.sys.in" and
"make.rules.in".)  It generates the following files:

  $TOPDIR/make.sys           compilation settings and flags
  $TOPDIR/make.rules         compilation rules
  $TOPDIR/*/.dependencies    dependencies, per source directory

where $TOPDIR is the top directory of the PWscf source tree.

".dependencies" files are actually generated by the "makedeps.sh"
shell script.  If you modify the program sources, you might have to
rerun it.  Note that you must run it from the directory it is in.

To force using a particular compiler, or compilation flags, or
libraries, you may set the appropriate environment variables when
running the configuration script.  For example:

  ./configure CC=gcc CFLAGS=-O3 LIBS="-llapack -lblas -lfftw"

Some of those environment variables are:

  TOPDIR       : top directory of the PWscf tree (defaults to `pwd`)
  F90, F77, CC : Fortran 90, Fortran 77, and C compilers
  CPP          : source file preprocessor (defaults to "$CC -E")
  LD           : linker (defaults to $F90)
  CFLAGS, FFLAGS, F90FLAGS, CPPFLAGS, LDFLAGS : compilation flags
  LIBDIRS      : extra directories to search for libraries (see below)

You should always be able to compile the PWscf suite of programs
without having to edit any of the generated files.  If you ever have
to, that should be considered a bug in the configuration script and
you are encouraged to submit a bug report.

*** IMPORTANT ***
PWscf can take advantage of several optimized numerical libraries:
- ESSL on AIX systems (shipped by IBM)
- MKL together with Intel compilers (shipped by Intel, free for
  non-commercial use)
- ATLAS (freely downloadable from http://math-atlas.sourceforge.net/)
- FFTW (freely downloadable from http://www.fftw.org/)

A reference implementation of all required external libraries is
bundled with the PWscf distribution, which means that you'll always be
able to compile the programs at least; but using optimized libraries
can often provide huge performance increases.

The configuration script attempts to find those libraries, but may
fail if they have been installed in non-standard locations.  You
should look at the LIBS environment variable (either in the output of
the configuration script, or in the generated "make.sys") to check
whether all available libraries were found.

If any libraries weren't found, you can rerun the configuration script
and pass it a list of directories to search, by setting the
environment variable LIBDIRS; directories in the list must
be separated by spaces.  For example:

  ./configure LIBDIRS="/opt/intel/mkl/mkl61/lib/32 /usr/local/lib/fftw-2.1.5"

If this still fails, you may set the environment variable LIBS
manually and retry.  For example:

  ./configure LIBS="-L/cineca/prod/intel/lib -lfftw -llapack -lblas"

Beware that in this case, you must specify *all* the libraries that
you want to link to.  The configuration script will blindly accept the
specified value, and will *not* search for any extra libraries.

If you want to use the FFTW library, the "fftw.h" include file is also
required.  If the configuration script wasn't able to find it, you can
specify the correct directory in the INCLUDEFFTW environment variable.
For example:

  ./configure INCLUDEFFTW="/cineca/lib/fftw-2.1.3/fftw"

----------------------------------------------------------------------
Second step : compiling
----------------------------------------------------------------------

Here is a list of available compilation targets:

  make pw           compile PW/pw.x (electronic and ionic optimization), 
                      PW/memory.x (checks memory usage and tests input)
  make ph           compile PH/ph.x (phonons)
  make pp           compile PP/pp.x and other postprocessing codes
  make d3           compile D3/d3.x (third-order energy derivatives)
  make gamma        compile Gamma/phcg.x (Gamma-only version of ph.x)
  make fpmd         compile FPMD/par2.x (Car-Parrinello MD)
  make cp           compile CPV/cp.x (Car-Parrinello MD with ultrasoft
                      pseudopotentials)
  make tools        compile pwtools/* (miscellaneous tools for data
                      analysis)
  make upf          compile upftools/* (utilities for pseudopotential
                      conversion)
  make pwcond       compile PWCOND/pwcond.x (for ballistic conductance)
  make nc           compile PWNC/pw.x (non-colinear magnetism)

  make pwall        same as "make pw ph pp d3 pwcond gamma tools"

  make links        create symbolic links to all executables in bin/
                      (required to run the examples)
  make clean        remove object files and executables
  make veryclean    remove configuration files too
  make tar          build a tarball of the current source tree

*** IMPORTANT ***
If you change any compilation or precompilation options
after a previous (successful or failed) compilation, you must run
"make clean" before recompiling, unless you know exactly which
routines are affected by the changed options and how to force their
recompilation.
*** IMPORTANT ***


----------------------------------------------------------------------
OLD INSTALLATION PROCEDURE
----------------------------------------------------------------------

*** WARNING ***
This installation procedure is deprecated.  It is still provided
mainly for architectures that aren't yet supported by the new
procedure.
*** WARNING ***

Installation is a three-step procedure:

1) "cd" to the top directory of the PWscf tree (that should be the one
   where this file is), and issue this command at the shell prompt:
     
     ./configure.old architecture

   where "architecture" identifies your machine's type.
   Running "./configure.old" without arguments prints a list of available
   architectures.

2) Edit the file "make.sys" to adapt to your local configuration:
   typically, you'll have to specify where libraries are placed on
   your system.

3) Now run:

     make target

   where "target" is one (or more) of the following:

     pw ph pp d3 gamma tools all upf fpmd cp links

   Running "make" without arguments prints a list of available
   targets.

----------------------------------------------------------------------
First step : choosing the architecture
----------------------------------------------------------------------

In this step, the following files are generated:

  $topdir/make.sys           compilation settings and flags
  $topdir/make.rules         compilation rules
  $topdir/*/.dependencies    dependencies, per source directory

where $topdir is the top directory of the PWscf source tree.
"make.sys" is copied from a set of architecture-dependent templates.
Here is a list of supported architectures:

  ibmsp       IBM SP2/3/4, IBM compiler
  t3e         Cray T3E, Cray compiler
  origin      SGI Origin 2000/3000, SGI compiler
  altix       SGI Altix 350/3000 with Linux, Intel compiler
  sunmpi      Sun parallel machines, Sun compiler
  alphaMPI    HP-Compaq alpha parallel machines, HP-Compaq compiler
  hp          HP PA-RISC workstations, HP compiler
  hpMPI       HP PA-RISC parallel machines, HP compiler
  beowulf     Linux Beowulf (PC cluster), Portland compiler
  beo_ifc     As above, Intel compiler
  alpha       HP-Compaq alpha workstations, HP-Compaq compiler
  ibm         IBM RS6000 workstations, IBM compiler
  irix        SGI workstations, SGI compiler
  pc_abs      Linux PCs, Absoft compiler
  pc_pgi      Linux PCs, Portland compiler
  pc_ifc      Linux PCs, Intel compiler
  pc_lahey    Linux PCs, Lahey compiler
  cygwin      Windows PC, Intel compiler (experimental)
  sun         Sun workstations, Sun compiler
  sxcross     NEC SX-6, cross-compilation
  fujitsu     Fujitsu vector machines, Fujitsu compiler
  hitachi     Hitachi SR8000

".dependencies" files are actually generated by the "shdep" shell
script in the "install" directory.  If you modify the program sources,
you might need to rerun it.  Note that you must run it from the
directory it is in.

----------------------------------------------------------------------
Second step : editing configuration settings
----------------------------------------------------------------------

Edit file "make.sys" and adapt it to your local configuration.  (There
is a slight chance that it may work out of the box.)

In most cases you will have to specify just the name and location of
libraries.  PWscf needs the following libraries, or equivalent:

  BLAS, LAPACK                      linear algebra
  FFTW                              discrete Fourier transform
  MPI (for parallel environment)    message passing

Highly optimized, architecture-specific libraries may be available on
your machine.  If this is the case, you may want to use them.
Some examples of such libraries are:

  ESSL (on AIX)                replaces BLAS and FFTW
  MKL  (on Intel)              replaces BLAS and LAPACK
  complib.sgimath (on IRIX)    replaces BLAS and LAPACK
  MASS  (on AIX)               faster transcendental functions

Linking of MPI is also handled transparently by some compilers, that
is, you don't have to specify the library location.

If no BLAS/LAPACK and/or FFTW libraries are available, you can compile
them from the sources included with the PWscf distribution.
Instructions on how to do it can be found in the "make.sys" template.

----------------------------------------------------------------------
Third step : compiling
----------------------------------------------------------------------

Here is a list of available compilation targets:

  make pw           compile PW/pw.x (electronic and ionic optimization), 
                      PW/memory.x (checks memory usage and tests input)
  make ph           compile PH/ph.x (phonons)
  make pp           compile PP/pp.x and other postprocessing codes
  make d3           compile D3/d3.x (third-order energy derivatives)
  make gamma        compile Gamma/phcg.x (Gamma-only version of ph.x)
  make fpmd         compile FPMD/par2.x (Car-Parrinello MD)
  make cp           compile CPV/cp.x (Car-Parrinello MD with ultrasoft
                      pseudopotentials)
  make tools        compile pwtools/* (miscellaneous tools for data
                      analysis)
  make upf          compile upftools/* (utilities for pseudopotential
                      conversion)
  make pwcond       compile PWCOND/pwcond.x (for ballistic conductance)
  make nc           compile PWNC/pw.x (non-colinear magnetism)

  make pwall        same as "make pw ph pp d3 pwcond gamma tools"

  make links        create symbolic links to all executables in bin/
                      (required to run the examples)
  make clean        remove object files and executables
  make veryclean    remove configuration files too
  make tar          build a tarball of the current source tree

PLEASE NOTE: if you change compilation or precompilation options after
the first compilation (or a failed compilation), run "make clean"
before recompiling, unless you know exactly which routines are
affected by compilation or precompilation options and how to force
their recompilation.

----------------------------------------------------------------------

More details of PWscf can be found in the "Installation" section of
the PWscf manual, on-line at http://www.pwscf.org/ (the new
installation procedure isn't covered yet).
