----------------------------------------------------------------------
INSTALLATION PROCEDURE
----------------------------------------------------------------------

For the impatient:

  ./configure
  make all

A "bin" directory will be generated, containing all the compiled
executable programs (actually, symlinks to them).

If you have problems or would like to tweak the default settings, read
the detailed instructions below.

----------------------------------------------------------------------
First step : configuring
----------------------------------------------------------------------

To configure the ESPRESSO source package for compilation, run the
"configure" script.  It will (try to) detect compilers and libraries
available on your machine, and set up things accordingly.

Cross-compilation isn't currently supported.  It might be in some
future release, but don't hold your breath.  Volunteers to implement
it are welcome.

"configure" is automatically generated by GNU Autoconf.  In case you
want to modify it, its source file is "configure.ac"; you may also
want to edit "make.sys.in" and "make.rules.in".  See instructions in
"README.configure".

Specifically, "configure" generates the following files:

  make.sys           compilation settings and flags
  make.rules         compilation rules
  */.dependencies    dependencies, per source directory

".dependencies" files are actually generated by the "makedeps.sh"
shell script, that "configure" invokes.  If you modify the program
sources, you might have to rerun it.

You should always be able to compile the ESPRESSO suite of programs
without having to edit any of the generated files.  However you may
have to tune "configure" by specifying appropriate environment
variables and/or command-line options.

Environment variables may be set in any of these ways:

  export VARIABLE=value         # sh, bash, ksh
  ./configure

  setenv VARIABLE value         # csh, tcsh
  ./configure

  ./configure VARIABLE=value    # any shell

Some environment variables that are relevant to "configure" are:

  F90, F77, CC : names of Fortran 90, Fortran 77, and C compilers
  CPP          : source file preprocessor (defaults to "$CC -E", or
                 "cpp" if $CC=gcc)
  LD           : linker (defaults to $F90)
  CFLAGS, FFLAGS, F90FLAGS, CPPFLAGS, LDFLAGS : compilation flags
  LIBDIRS      : extra directories to search for libraries (see below)

For example, the following command line:

  ./configure F90=ifort FFLAGS="-Vaxlib -O2 -assume byterecl" CC=gcc \
              CFLAGS=-O3 LDFLAGS="-Vaxlib -static"

instructs "configure" to use ifort as Fortran 90 compiler with flags
"-Vaxlib -O2 -assume byterecl", gcc as C compiler with flags "-O3",
and to use flags "-Vaxlib -static" when linking.  Note that the values
of FFLAGS and LDFLAGS must be quoted, because they contain spaces.

"configure" also recognizes the following command-line options:

  --disable-parallel : compile serial code, even if parallel
                       environment is available
  --disable-shared : compile statically (don't use shared libraries)
  --enable-shared : use shared libraries if available

*** IMPORTANT ***
ESPRESSO can take advantage of several optimized numerical libraries:
- ESSL on AIX systems (shipped by IBM)
- MKL together with Intel compilers (shipped by Intel, free for
  non-commercial use)
- ATLAS (freely downloadable from http://math-atlas.sourceforge.net/)
- FFTW (freely downloadable from http://www.fftw.org/)
and a few others.
Note that FFTW must be version 2; version 3 is not yet supported.

A reference implementation of all required external libraries is
bundled with the ESPRESSO distribution, which means that you'll always
be able to compile the programs at least; but using optimized
libraries can often provide huge performance increases.

"configure" attempts to find those libraries, but may fail if they
have been installed at non-standard places.  You should examine the
final value of LIBS (either in the output of "configure", or in the
generated "make.sys") to check whether all available libraries were
found.

If any libraries weren't found, you can specify a list of directories
to search in the environment variable LIBDIRS, and rerun "configure";
directories in the list must be separated by spaces.  For example:

  ./configure LIBDIRS="/opt/intel/mkl70/lib/32 /usr/local/lib"

If this still fails, you may set the environment variable LIBS
manually and retry.  For example:

  ./configure LIBS="-L/cineca/prod/intel/lib -lfftw -llapack -lblas"

Beware that in this case, you must specify *all* the libraries that
you want to link to.  "configure" will blindly accept the specified
value, and will *not* search for any extra libraries.  (This is so
that if "configure" finds any library that you *don't* want to use,
you can override it.)

If you want to use the FFTW library, the "fftw.h" include file is also
required.  If the configuration script wasn't able to find it, you can
specify its location in the INCLUDEFFTW environment variable.
For example:

  ./configure INCLUDEFFTW="/cineca/lib/fftw-2.1.3/fftw"

If everything else fails, you'll have to write the "make.sys" file
manually.  The "install" directory contains several examples (named
"Make.*"): you may choose the one that looks most appropriate for your
machine, copy it to "make.sys", and tweak it until you obtain
successful compilation.  If this ever happens, please let us know, and
we'll try to support your machine in the next version of "configure".

----------------------------------------------------------------------
Second step : compiling
----------------------------------------------------------------------

At your option, you may compile the complete ESPRESSO suite of
packages (with "make all"), or only some specified programs.

Here is a list of available compilation targets:

  make pw           compile PW/pw.x (electronic and ionic optimization), 
                      PW/memory.x (checks memory usage and tests input)
  make fpmd         compile FPMD/par2.x (Car-Parrinello MD)
  make cp           compile CPV/cp.x (Car-Parrinello MD with ultrasoft
                      pseudopotentials)
  make ph           compile PH/ph.x (phonons)
  make pp           compile postprocessing codes in the PP directory
  make gamma        compile Gamma/phcg.x (Gamma-only version of ph.x)
  make nc           compile PWNC/pwnc.x (non-colinear magnetism)
  make pwcond       compile PWCOND/pwcond.x (ballistic conductance)
  make d3           compile D3/d3.x (third-order energy derivatives)
  make raman        compile Raman/ram.x (Raman cross-section calculation)
  make tools        compile pwtools/* (miscellaneous tools for data
                      analysis)

  make ld1          compile atomic/ld1.x code for pseudopotential generation
  make upf          compile upftools/* (utilities for pseudopotential
                      conversion)

  make pwall        same as "make pw ph pp d3 raman pwcond gamma tools"
  make all          same as "make pwall ld1 cp fpmd upf"

  make clean        remove object files and executables
  make veryclean    remove configuration files too
  make tar          build a tarball of the current source tree

*** IMPORTANT ***
If you change any compilation or precompilation options
after a previous (successful or failed) compilation, you must run
"make clean" before recompiling, unless you know exactly which
routines are affected by the changed options and how to force their
recompilation.

----------------------------------------------------------------------

See also the "Installation" section of the PWscf manual in the "Doc"
directory, or on-line at http://www.pwscf.org/guide.htm
