# System-dependent definitions for Macintosh with Intel compilers
# (both C and Fortran) and MKL - edit according to your needs
# Contributed by Matteo Cococcioni

# compilation rules

.SUFFIXES :
.SUFFIXES : .o .c .f .f90

.f90.o:
	$(MPIF90) $(F90FLAGS) -c $<

.f.o:
	$(F77) $(FFLAGS) -c $<

.c.o:
	$(CC) $(CFLAGS) -c $<

CC             = icc
MPICC          = icc
CFLAGS         = -O3 $(DFLAGS) $(IFLAGS)
CPP            = icc -E
CPPFLAGS       =  $(DFLAGS) $(IFLAGS)
F90            = ifort
MPIF90         = ifort
F90FLAGS       = $(FFLAGS) -nomodule -fpp $(FDFLAGS) $(IFLAGS) $(MODFLAGS)
F90FLAGS_NOOPT = $(FFLAGS_NOOPT) -nomodule -fpp $(FDFLAGS) $(IFLAGS) $(MODFLAGS)
F77            = ifort
MPIF77         = ifort
FFLAGS         = -O3 -tpp7 -assume byterecl
FFLAGS_NOOPT   = -O0 -assume byterecl
LD             = ifort
LDFLAGS        = 
AR             = ar
ARFLAGS        = ruv
RANLIB         = echo
BLAS_LIBS      = -L/Library/Frameworks/Intel_MKL.framework/Libraries/32 \
                 -lmkl_ia32 -lguide 
LAPACK_LIBS    = -lmkl_lapack
FFT_LIBS       = 
MPI_LIBS       = 
MASS_LIBS      = 

# -----------------------------
# application-specific settings

# See include/defs.h.README for a list of precompilation options
# (possible arguments to -D or -U) and their meaning
DFLAGS         = -D__LINUX -D__INTEL -D__FFTW -D__USE_INTERNAL_FFTW
FDFLAGS        = $(DFLAGS)
IFLAGS         = -I../include \
                 -I/Developer/SDKs/MacOSX10.4u.sdk/usr/include/malloc
MODFLAGS       = -I. -I../Modules -I../PW -I../PH -I../iotk/src -I../CPV

LIBOBJS        = ../flib/ptools.a ../flib/flib.a ../clib/clib.a ../iotk/src/libiotk.a
# LIBS must contain the location of all needed external libraries
LIBS           = $(LAPACK_LIBS) $(BLAS_LIBS) $(FFT_LIBS) $(MPI_LIBS) $(MASS_LIBS)
# MYLIB can be one of the following (depending on LIBS):
# blas       : compile the local copy of blas routines
# lapack     : compile the local copy of lapack routines
# blas_and_lapack : all of the above - use this for a quick test
#              or if you don't have an optimized blas/lapack library
# lapack_ibm : compile only lapack routines not present in IBM ESSL
#              use this together with IBM ESSL
# lapack_t3e : compile only lapack routines not present in T3E scilib
#              use this together with T3E scilib
# lapack_mkl : compile only lapack routines not present in Intel MKL
#              use this together with Intel MKL
MYLIB          = lapack_mkl
