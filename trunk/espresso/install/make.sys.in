# @configure_input@

# compilation rules

.SUFFIXES :
.SUFFIXES : .o .c .f .f90

# most fortran compilers can directly preprocess c-like directives: use
# 	$(MPIF90) $(F90FLAGS) -c $<
# if explicit preprocessing by the C preprocessor is needed, use:
# 	$(CPP) $(CPPFLAGS) $< -o $*.F90 
#	$(MPIF90) $(F90FLAGS) -c $*.F90 -o $*.o
# remember the tabulator in the first column !!!

.f90.o:
	@f90rule@

# .f.o and .c.o: do not modify

.f.o:
	$(F77) $(FFLAGS) -c $<

.c.o:
	$(CC) $(CFLAGS)  -c $<

@SET_MAKE@
# DFLAGS  = precompilation options (possible arguments to -D and -U)
#           used by the C compiler and preprocessor
# FDFLAGS = as DFLAGS, for the f90 compiler
# See include/defs.h.README for a list of options and their meaning
# With the exception of IBM xlf, FDFLAGS = $(DFLAGS)
# For IBM xlf, FDFLAGS is the same as DFLAGS but with separating commas !

DFLAGS         = @dflags@
FDFLAGS        = @fdflags@

# IFLAGS = how to locate directories where files to be included are
# In most cases, IFLAGS = -I../include
# If loading an external FFTW library, add the location of FFTW include files

IFLAGS         = @iflags@

# MODFLAGS = flag used by f90 compiler to locate modules
# You need to search for modules in ./, in ../iotk/src, in ../Modules
# Some applications also neeed modules in ../PW, ../PH, ../CPV

MODFLAGS       = @imod@./  @imod@../Modules  @imod@../iotk/src \
                 @imod@../PW  @imod@../PH  @imod@../CPV

# Compilers: fortran-90 (serial and parallel versions), fortran-77, C
# If you are compiling for serial execution, use MPIF90 = $(F90) 
# If you do not have anything suitable for MPIF90, use MPIF90 = $(F90),
# specify the directory containing "mpif.h" in IFLAGS,
# specify the location of MPI libraries in MPI_LIBS

CC             = @cc@
F90            = @f90@
MPIF90         = @mpif90@
F77            = @f77@

# C preprocessor and preprocessing flags - for explicit preprocessing, 
# if needed (see the compilation rules above)
# preprocessing flags must include DFLAGS and IFLAGS

CPP            = @cpp@
CPPFLAGS       = @cppflags@ $(DFLAGS) $(IFLAGS)

# compiler flags: C, F90, F77
# C flags must include DFLAGS and IFLAGS
# F90 flags must include MODFLAGS, IFLAGS, and FDFLAGS with the appropriate syntax

CFLAGS         = @cflags@ $(DFLAGS) $(IFLAGS)
F90FLAGS       = @f90flags@ @pre_fdflags@$(FDFLAGS) $(IFLAGS) $(MODFLAGS)
FFLAGS         = @fflags@

# compiler flags without optimization for fortran-77
# the latter is NEEDED to properly compile dlamch.f, used by lapack

FFLAGS_NOOPT   = @fflags_noopt@

# Linker and linker-specific flags (if any)
# Typically LD coincides with F90 or MPIF90 - not actually used

LD             = @ld@
LDFLAGS        = @ldflags@

# External Libraries (if any) : blas, lapack, fft, MPI
# For parallel execution, the correct path to MPI libraries must
# be specified in MPI_LIBS (expect for IBM if you use mpxlf)

BLAS_LIBS      = @blas_libs@
LAPACK_LIBS    = @lapack_libs@
FFT_LIBS       = @fft_libs@
MPI_LIBS       = @mpi_libs@

# IBM-specific: MASS libraries, if available and if -D__MASS is defined in FDFLAGS

MASS_LIBS      = @mass_libs@

# MYLIB can be one of the following (depending on BLAS_LIBS and LAPACK_LIBS):
# blas       : compile the local copy of blas routines
# lapack     : compile the local copy of lapack routines
# blas_and_lapack : all of the above - use this for a quick test
#              or if you don't have an optimized blas/lapack library
# lapack_ibm : compile only lapack routines not present in IBM ESSL
#              use this together with IBM ESSL
# lapack_atlas: compile only lapack routines not present in the Atlas library
#              use this together with Atlas libraries if these are not complete 
# lapack_mkl : compile only lapack routines not present in Intel MKL
#              use this together with Intel MKL

MYLIB          = @mylib@

# ar command and flags - for most architectures: AR = ar, ARFLAGS = ruv
# ARFLAGS_DYNAMICS is used in iotk to produce a dynamical library,
# for Mac OS-X with PowerPC and xlf compiler. In all other cases
# ARFLAGS_DYNAMICS = $(ARFLAGS)

AR             = @ar@
ARFLAGS        = @arflags@
ARFLAGS_DYNAMIC= @arflags_dynamic@

# ranlib command. If ranlib is not needed (it isn't in most cases) use
# RANLIB = echo

RANLIB         = @ranlib@

# all internal and external libraries - do not modify

LIBOBJS        = ../flib/ptools.a ../flib/flib.a ../clib/clib.a ../iotk/src/libiotk.a
LIBS           = $(LAPACK_LIBS) $(BLAS_LIBS) $(FFT_LIBS) $(MPI_LIBS) $(MASS_LIBS)

