input_description -distribution {Quantum Espresso} -package turboTDDFPT -program turbo_lanczos.x {

    toc {}

    intro {
    	  Input data format: { } = optional, [ ] = it depends.

	  All quantities whose dimensions are not explicitly specified are in
	  RYDBERG ATOMIC UNITS

	  BEWARE: TABS, DOS <CR><LF> CHARACTERS ARE POTENTIAL SOURCES OF TROUBLE

          Comment lines in namelists can be introduced by a "!", exactly as in 
          fortran code. Comments lines in ``cards'' can be introduced by 
          either a "!" or a "#" character in the first position of a line.

	  Structure of the input data:
	  ===============================================================================

	  &lr_input
	    ...
	  /

	  &lr_control
	    ...
	  /	    

	  [ &lr_post
	    ...
	   / ]

    }

    namelist lr_input {

	label { This namelist is always needed ! }

	var title  -type CHARACTER {
	    info { A string describing the job. }
	    status { OPTIONAL }
	}

	var prefix -type CHARACTER { 
	    default { 'pwscf' }
	    info {
		Sets the prefix for generated and read files. The files 
		generated by the ground state pw.x run should have this 
		same prefix.
	    }
	}

	var outdir -type CHARACTER { 
	    default { './' }
	    info {
		The directory that contains the run critical files, which 
		include the files generated by ground state pw.x run.
	    }
	}

	var wfcdir -type CHARACTER { 
	    default { './' }
	    info {
		The directory that contains the run critical files, which 
		include the files generated by ground state pw.x run.
	    }
	}
	
	var restart -type LOGICAL {
	    default {.false.}
	    info {
		When set to .true., turbo_lanczos.x will attempt to restart 
		from a previous interrupted calculation. (see restart_step 
		variable).

		Beware, if set to .false. turbo_lanczos.x will OVERWRITE any
		previous runs.
	    }
	}

	var restart -type INTEGER {
	    default {itermax}
	    info {
		The code writes restart files every restart step iterations.
		Restart files are automatically written at the end of 
		itermax Lanczos steps.
	    }
	}

	var lr_verbosity -type INTEGER {
	    default {1}
	    info {
		This integer variable controls the amount of information 
		written to standard output.
	    }
	}

	var disk_io -type CHARACTER {
	    default { 'default' }
	    info {
    		Fine control of disk usage. Currently only 'reduced' is 
		supported where no restart files are written, apart from 
		the 'default' mode.
	    }
	}
    }
    namelist lr_control {
	var itermax -type INTEGER {
	    default {500}
	    info {
		Number of iterations to be performed.
		}
	}
	
	var ipol -type INTEGER {
	    default {1}
	    info {
		An integer variable that determines which element of the 
		dynamical polarizability will be computed: 
		1 -> alpha_xx(omega), 2 -> alpha_yy(omega), and 
		3 -> alpha_zz(omega). When set to 4, three Lanczos chains 
		are sequentially performed and the full polarizability 
		tensor and the absorption coefficient are computed.
		}
	}

	var nipol -type INTEGER {
	    default {
	    	    1 if ipol < 4;
		    3 if ipol=4
		    }
	    info {
	    	Determines the number of zeta coefficients to be calculated
		for a given polarization direction.
		}
	}		
	
	var ltammd -type LOGICAL {
	    default {.false.}
	    info {
		When set to .true. the Tamm-Dancoff approximation is used 
		in constructing the Liouvillian.
		}
	}

	var no_hxc -type LOGICAL {
	    default {.false.}
	    info {
		When set to .true. the change in the internal field 
		(Hartree and exchange-correlation) is ignored in the 
		calculation, resulting in the independent electron 
		approximation.
		}
	}
`       var ecutfock -type REAL { 
            default { ecutrho }
            info {
                kinetic energy cutoff (Ry) for the exact exchange operator in 
                EXX type calculations. By default this is the same as ecutrho
                but in some EXX calculations significant speed-up can be found
                by reducing ecutfock, at the expense of some loss in accuracy.
                Currently only implemented for the optimized gamma point only
                calculations.
            }
        }
	var charge_response -type INTEGER {
	    default {0}
	    info {
		When set to 1, the code computes the response of the charge 
		density and writes it into a file format determined by the 
		variable plot type. Setting charge response to 1 makes the 
		presence of the card lr post mandatory.
		}
	}
    }			
    namelist lr_post {
    	var omeg -type REAL {
	    default {0.0}
	    info {
	    	The response of the charge density is calculated for this 
		transition energy (in Rydberg units)
		}
	}

	var epsil -type REAL {
	    default {0.0}
	    info {
	    	The broadening/damping term (in Rydberg units).
		}
	}

	var beta_gamma_z_prefix -type CHARACTER {
	    default {'pwscf'}
	    info {
		The prefix of the file where the beta gamma zeta coefficients 
		from the first calculation can be set manually using this 
		parameter. The file outdir/beta gamma z prefix.beta gamma z.x 
		(where x=1-3) must exist.
		}
	}

	var w_T_npol -type INTEGER {
	    default {1}
	    info {
		Number of polarization directions considered in the previous
		calculation. It must be set to 3 if in the previous calculation
		 ipol=4, it must be set to 1 otherwise.
		 }
	}

	var plot_type -type INTEGER {
	    default {1}
	    info {
	    	An integer variable that determines the format of the file 
		containing the charge density response. 1: A file containing
		the x y z grid coordinates and the corre- sponding value of
		the density is produced 2: The density response is written 
		in Xcrysden format 3: The density response is written in 
		the gaussian cube format.
		}
	}
}
}				
